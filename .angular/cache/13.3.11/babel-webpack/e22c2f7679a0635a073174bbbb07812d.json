{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { ApiUrls } from '../const/api-urls';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DashboardService = /*#__PURE__*/(() => {\n  class DashboardService {\n    constructor(http, http1, handler) {\n      this.http = http;\n      this.http1 = http1;\n      this.handler = handler;\n      this.showFullLeftSideBar = true;\n      this.sideBar = new BehaviorSubject(true);\n      this.showPopUpsAfterTour = new BehaviorSubject(true);\n      this.rightSideBar = new BehaviorSubject(true);\n      this.audioUrls = `${environment.apiBaseUrl}/${ApiUrls.audioLinks}`;\n      this.showRightSideBar = true;\n      this.showUserStartPopup = true;\n      this.showUserPopup = new BehaviorSubject(true);\n      this.showrightsideMyCourseTable = new BehaviorSubject(true);\n      this.showRejuvenationRightSide = new Subject();\n      this.showCalendarRightSide = new Subject();\n      this.startUserSelectedTour = new Subject();\n      this.addExtensionFlow = new Subject();\n      this.userProfileImage = new Subject();\n      this.userProfile = new Subject();\n      this.userPlayList = [];\n      // level\n      this.userLevel = 0;\n      this.currentLevelProgress = 0;\n      this.dataGot = false;\n      //task achievement\n      this.taskAchieveSubject = new Subject();\n      this.triggerExpertSubject = new Subject();\n      this.isExpert = false;\n      // manager for dsr\n      this.userManager = [];\n      this.dsrCCMember = [];\n      this.ccList = '';\n      this.isDsrSentForOnce = false;\n      // show workden or sollution point\n      this.organizationSettingWorkden = false;\n      this.organizationSettingSollutionPoint = false;\n      this.organizationSettingCalendar = 'google';\n      this.googleConnect = false;\n      this.microsoftConnect = false;\n      this.githubConnected = false;\n      this.organisationCalendar = 'google';\n      // simplify changes\n      this.modulesSetting = [{\n        name: 'WorkDen',\n        img: '../../../../../../assets/homepage/workdenicon.svg',\n        selected: false\n      }, {\n        name: 'ExpertConnect',\n        img: '../../../../../../assets/homepage/sollutionpointicon.svg',\n        selected: false\n      }, {\n        name: 'SimplifyPath',\n        img: '../../../../../../assets/homepage/simplifyicon.svg',\n        selected: false\n      }];\n      this.selfbestIntegration = [{\n        name: 'Google Calendar',\n        img: './../../../../../assets/calendar/Google_Calendar.max-1100x1100@2x.png',\n        selected: false,\n        show: true\n      }, {\n        name: 'Microsoft Calendar',\n        img: './../../../../../assets/calendar/Microsoft_Office_Outlook_(2018â€“present).svg@2x.png',\n        selected: false,\n        show: false\n      }];\n      this.simplifyList = [{\n        name: 'Jira',\n        img: '../../../../../../assets/homepage/jira.svg',\n        selected: false,\n        show: true,\n        connect: false,\n        manual: false\n      }, {\n        name: 'Gmail',\n        img: '../../../../../assets/homepage/gmail.svg',\n        selected: false,\n        show: true,\n        connect: false,\n        manual: false\n      }, {\n        name: 'Salesforce',\n        img: '../../../../../assets/homepage/salesforce.svg',\n        selected: false,\n        show: true,\n        connect: false,\n        manual: false\n      }, {\n        name: 'Keka',\n        img: '../../../../../assets/homepage/keka.svg',\n        selected: false,\n        show: true,\n        connect: false,\n        manual: true,\n        refreshToken: '',\n        domainName: ''\n      }, {\n        name: 'Freshwork',\n        img: '../../../../../assets/homepage/Freshwork.svg',\n        selected: false,\n        show: false,\n        connect: false,\n        manual: true\n      }, {\n        name: 'DBF',\n        img: '../../../../../assets/homepage/dbf.png',\n        selected: false,\n        show: true,\n        connect: false,\n        manual: true,\n        email: '',\n        password: ''\n      }, {\n        name: 'MS365',\n        img: '../../../../../assets/homepage/ms365.svg',\n        selected: false,\n        show: true,\n        connect: false,\n        manual: false\n      }, {\n        name: 'Whatsapp',\n        img: '../../../../../assets/homepage/whatsapp.svg',\n        selected: false,\n        show: true,\n        connect: false,\n        manual: true,\n        accessToken: '',\n        phoneNumberId: '',\n        Url: '',\n        verify_token: ''\n      }, {\n        name: 'Upload PDF',\n        img: '../../../../../assets/homepage/pdficon.svg',\n        selected: false,\n        show: false,\n        connect: false,\n        showError: false\n      }];\n      this.httpClient = new HttpClient(handler);\n    }\n    setNotification(value) {\n      this.notificationData = value;\n    }\n    getNotificationData() {\n      return this.notificationData;\n    }\n    getMyCourses(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/courses`);\n    }\n    getCalenderEvents(ID, loc) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/dashboard/calender?location=${loc}`);\n    }\n    getNewCoursesList(ID, search) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/dashboard/udemysearch` + `?search=${search}`);\n    }\n    getCourseList(Id, obj) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${Id}/course/search`, obj);\n    }\n    getCourseProviderList() {\n      return this.http.get(`${environment.apiBaseUrl}/sheet/course-providers`);\n    }\n    sendCourseListId(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/dashboard/udemysearchcourse` + `?id=${ID}`);\n    }\n    sendCourseByUrl(ID, data) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/dashboard/udemysearchcoursewithurl` + `?url=${data}`);\n    }\n    getMyProfile(ID, platform) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/dashboard/profile?platform=${platform}`);\n    }\n    setLeaderboardProfile(ID, obj) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/toggle-leaderboard`, obj);\n    }\n    getOrganizationProfile(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/organisation/details`);\n    }\n    addNewOrganizationSkill(ID, data) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/organisation/addskills`, data);\n    }\n    getOrganizationTransferList(ID, orgId) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/organisation/admins?organisation_id=${orgId}`);\n    }\n    accountSettings(endPoint, ID, type) {\n      return this.http1.delete(`${environment.apiBaseUrl}/user/${ID}/${endPoint}?type=${type}`);\n    }\n    getSuggestedCourseApi(ID, skill, platform) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/course/suggested?skill=${skill}&platform=${platform}`);\n    }\n    // getUserCompletedCourses(ID){\n    //   return this.http.get(`${environment.apiBaseUrl}/user/${ID}/course/completed`);\n    // }\n    getUserDashboardNotification(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/dashboard/getnotification`);\n    }\n    getOverallList(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/dashboard/total-time-distracted`);\n    }\n    deleteMyCourse(ID, course) {\n      return this.http1.delete(`${environment.apiBaseUrl}/user/${ID}/course?course_id=${course.Courseid}&type=${course.Type}`);\n    }\n    setUserNewCourse(ID, obj) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/course`, obj);\n    }\n    setRightSideBar(val) {\n      // this.showRightSideBar = !this.showRightSideBar;\n      this.rightSideBar.next(val);\n    }\n    openUserStartPop() {\n      this.showUserStartPopup = !this.showUserStartPopup;\n      this.showUserPopup.next(this.showUserStartPopup);\n    }\n    showMycourseTable(value) {\n      this.showrightsideMyCourseTable.next(value);\n    }\n    setLeftSideBar() {\n      this.showFullLeftSideBar = !this.showFullLeftSideBar;\n      this.sideBar.next(this.showFullLeftSideBar);\n    }\n    setPermanentSmallSideBar() {\n      this.showFullLeftSideBar = false;\n      this.sideBar.next(this.showFullLeftSideBar);\n    }\n    getLeftSideBar() {\n      return this.showFullLeftSideBar;\n    }\n    setReminder(ID, data) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/dashboard/insertgoogleevent`, data);\n    }\n    getDistractionData(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/dashboard/distraction`);\n    }\n    setDistractionData(ID, obj) {\n      //after request sending status\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/dashboard/distraction`, obj, {\n        responseType: 'text',\n        observe: 'response'\n      }).pipe(map(data => {\n        return {\n          status: data.status\n        };\n      }));\n    }\n    //after request sending status\n    deleteDistractionData(ID, distraction_id) {\n      return this.http1.delete(`${environment.apiBaseUrl}/user/${ID}/dashboard/distraction/${distraction_id}`, {\n        responseType: 'text',\n        observe: 'response'\n      }).pipe(map(data => {\n        return {\n          status: data.status\n        };\n      }));\n    }\n    //after request sending status\n    toggleDistractionData(ID, obj) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/dashboard/toggledistraction`, obj, {\n        responseType: 'text',\n        observe: 'response'\n      }).pipe(map(data => {\n        return {\n          status: data.status\n        };\n      }));\n    }\n    // showPopUps(ID, obj) {\n    //   return this.http.post(`${environment.apiBaseUrl}/user/${ID}/dashboard/lastlogin`, obj);\n    // }\n    getLeaderBoardListApi(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/rank`);\n    }\n    // showUserClaimPoints(ID, timeZone) {\n    //   return this.http.get(`${environment.apiBaseUrl}/user/${ID}/reward/dailylogin` + `?time_zone=${timeZone}`);\n    // }\n    slackBotApi(obj) {\n      return this.http.post(`${environment.apiBaseUrl}/slackbot/alert/stuck`, obj);\n    }\n    showpooling(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/reward/message`);\n    }\n    getAudioLinks() {\n      return this.http.get(this.audioUrls);\n    }\n    getGoHourPlayList(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/getgohour/music`);\n    }\n    getGetgoCategory(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/category/s`);\n    }\n    SuggestedLink(ID, category) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/category/suggestion?category=${category}`);\n    }\n    getFilterLinks(ID, filter) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/category/search-url?query=${filter}`);\n    }\n    addNewCategory(ID, obj) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/category`, obj);\n    }\n    removeCategory(ID, value) {\n      return this.http1.delete(`${environment.apiBaseUrl}/user/${ID}/category?Category=${value}`);\n    }\n    addUrlInCategory(ID, obj) {\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/category/url`, obj);\n    }\n    selectCategory(ID, obj) {\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/category/select-deselect-category`, obj);\n    }\n    getTimeInterval(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/category/default-time-interval`);\n    }\n    setTimeInterval(ID, obj) {\n      return this.http1.put(`${environment.apiBaseUrl}/user/${ID}/category/default-time-interval `, obj);\n    }\n    getDistractionList(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/category/get-distractions`);\n    }\n    getSuggestedList() {\n      return this.http.get(`${environment.apiBaseUrl}/default`);\n    }\n    removeSong(ID, title, url) {\n      return this.http1.delete(`${environment.apiBaseUrl}/user/${ID}/getgohour/music?title=${title}&url=${url}`);\n    }\n    changeDistractionUrl(ID, obj) {\n      return this.http1.put(`${environment.apiBaseUrl}/user/${ID}/category/select-deselect-url`, obj);\n    }\n    deleteUrlInCategory(ID, obj) {\n      return this.http1.put(`${environment.apiBaseUrl}/user/${ID}/category/delete-url`, obj);\n    }\n    getOrgActivityList(ID, query) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/organisation/orgactivity-logs?${query}`);\n    }\n    getActivityList(ID, query) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/category/activity-logs?${query}`);\n    }\n    editApprovedUser(ID, obj, endPoint) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/preapproved/${endPoint}`, obj);\n    }\n    setCourseCompletion(ID, obj) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/dashboard/enddaycheckin`, obj);\n    }\n    getPendingRequestList(ID, Event) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/organisation/user-requests` + `?status=${Event}`);\n    }\n    getAccountSettingList(ID, endPoint) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/${endPoint}`);\n    }\n    pendingAccountSetting(ID, endPoint, obj) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/${endPoint}`, obj);\n    }\n    getPendingRequestListCompany(ID, Event) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/organisation/requests` + `?status=${Event}`);\n    }\n    getAccountabilityList(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/organisation/accountiblity-partners`);\n    }\n    updateUserStatus(ID, obj) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/organisation/status`, obj);\n    }\n    deletePendingUserApi(ID, obj) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/delete`, obj);\n    }\n    // calendar data api need to check\n    getCalendarDx(ID, loc) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/getgoday/calendar?loc=${loc}`);\n    }\n    setCalendarDx(ID, obj) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/calendar/event`, obj);\n    }\n    // setUserTasks(ID, obj) {\n    //   return this.http.post(`${environment.apiBaseUrl}/user/${ID}/dashboard/setgetgohours`, obj);\n    // }\n    setNewUser(ID) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/status`, {}, {\n        responseType: 'text',\n        observe: 'response'\n      });\n    }\n    //get go Api\n    getGetGoSecondScreenDetails(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/getgohour`);\n    }\n    // getGetGoFirstScreenDetails(ID, loc) {\n    //   return this.http.get(`${environment.apiBaseUrl}/user/${ID}/getgoday/activity?loc=${loc}`);\n    // }\n    startGetGoProcess(ID, obj, loc) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/getgohour/get-started?loc=${loc}`, obj);\n    }\n    updateGetGoTimeInterval(ID, obj, loc) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/getgohour/timeinterval?loc=${loc}`, obj);\n    }\n    updateGetGoFiveSteps(ID, obj, loc) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/getgoday/step?loc=${loc}`, obj);\n    }\n    // addGetGoOptionsSkills(ID, obj, loc) {\n    //   return this.http.post(`${environment.apiBaseUrl}/user/${ID}/getgoday/skilloption?loc=${loc}`, obj);\n    // }\n    // deleteGetGoOptionsSkills(ID, obj, loc) {\n    //   return this.http1.delete(`${environment.apiBaseUrl}/user/${ID}/getgoday/skilloption?loc=${loc}&Type=${obj.Type}&Element=${encodeURIComponent(obj.Element)}`);\n    // }\n    startTimer(ID, obj, loc) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/getgohour/start?loc=${loc}`, obj);\n    }\n    pauseGetGoTime(ID, obj, loc) {\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/getgohour/pause?loc=${loc}`, obj);\n    }\n    resumeGetGoTime(ID, obj, loc) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/getgohour/resume?loc=${loc}`, obj);\n    }\n    endGetGoTime(ID, obj, loc) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/getgohour/end?loc=${loc}`, obj);\n    }\n    resetGetGoTime(ID, obj, loc) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/getgohour/reset?loc=${loc}`, obj);\n    }\n    // getGoInputProgress(ID, obj, loc) {\n    //   return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/getgoday/feedback?loc=${loc}`, obj);\n    // }\n    //join meeting link\n    joinGroupCall(ID, loc) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/getgohour/conference?location=${loc}`);\n    }\n    getGetGoGraphDetails(ID, loc) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/getgohour/activities?location=${loc}`);\n    }\n    completeGetGoHour(ID, obj) {\n      return this.http1.put(`${environment.apiBaseUrl}/user/${ID}/getgohour/complete`, obj);\n    }\n    getfiveStepProcessDetails() {\n      return this.http.get(`${environment.apiBaseUrl}/sheet/getgo-curriculum`);\n    }\n    getSuggestedWordsApi(val) {\n      return this.http.get(`${environment.apiBaseUrl}/sheet/domains?key=${val}`);\n    }\n    getSuggestedEmailApi(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/organisation/members`);\n    }\n    //get go api end\n    //get go quest level game\n    getQuestLevelDetails(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/getgoday/level`);\n    }\n    //manager api start\n    getOverallTeam(ID, obj) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/team/insight`, obj);\n    }\n    //list of teams that are created by manger\n    getAlreadyCreatedListTeam(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/teams?manager_id=${ID}`);\n    }\n    //List of Team Members\n    getListOfTeam(ID, TeamID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/team/members?team_id=${TeamID}`);\n    }\n    changeListTeamUserDomain(ID, obj) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/team/member/domain`, obj);\n    }\n    deleteListTeamUser(ID, userID, teamId) {\n      return this.http1.delete(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/team/member?UserId=${userID}&TeamId=${teamId}`);\n    }\n    //deleting multiples teams\n    deleteSelectedTeams(ID, teams) {\n      const options = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        }),\n        body: {\n          TeamIds: teams\n        }\n      };\n      return this.http1.delete(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/teams`, options);\n    }\n    //deleting multiples members\n    deleteSelectedMembers(ID, userIds, teamId) {\n      const options = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        }),\n        body: {\n          UserIds: userIds,\n          TeamId: teamId\n        }\n      };\n      return this.http1.delete(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/team/members`, options);\n    }\n    //Mail to unregistered employees\n    sendMailToUnregistered(ID, teamId) {\n      return this.http1.get(`${environment.apiBaseUrl}/user/${ID}/organisation/joining-mail?q=${teamId}`);\n    }\n    //manager team table toggle action\n    toggleActionTeamMember(ID, obj) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/team/member/status`, obj);\n    }\n    getTeamActivityGraphData(ID, obj) {\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/team/activity-insight`, obj);\n    }\n    //api to be changed\n    createTeam(ID, obj) {\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/team`, obj);\n    }\n    addMemberToTeam(ID, obj) {\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/team/member`, obj);\n    }\n    downloadExportFileApi(ID, obj) {\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/team/export`, obj, {\n        responseType: 'arraybuffer'\n      });\n    }\n    downloadExportFormat(ID) {\n      return this.http1.get(`${environment.apiBaseUrl}/user/${ID}/organisation/download`, {\n        responseType: 'arraybuffer'\n      });\n    }\n    uploadExportFormat(obj, ID, loc) {\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/organisation/upload?q=${loc}`, obj);\n    }\n    //manager api end\n    //achivement popup\n    getUserDataPopup(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/getgoday/stats`);\n    }\n    setUserDataPopup(ID, obj) {\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/getgoday/progress-mail`, obj);\n    }\n    sendShareTimesheet(ID, obj) {\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/getgoday/timesheet-achievement-mail`, obj);\n    }\n    //get organization dashboard data\n    getOrgInsight(obj, ID) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/organisation/insight`, obj);\n    }\n    //get organization dashboard insight data\n    getOrgActivityInsight(obj, ID) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/organisation/activity-insight`, obj);\n    }\n    //get organization dashboard dat for team\n    getOrgTeamInsight(obj, ID) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/team/stats`, obj);\n    }\n    //get team insight data for all\n    getTeamInsightData(obj, ID) {\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/team/all-team-data`, obj);\n    }\n    getOrgCourses(obj, ID) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/organisation/courses`, obj);\n    }\n    // api for adding team in organization dashbboard\n    getAllPopApi(ID, lastlogin, location) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/popup?last_login=${lastlogin}&location=${location}`);\n    }\n    //get team name, RM name and skills with levels\n    getUserSkills(ID, skillId) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/user-data?id=${skillId}`);\n    }\n    // organization api\n    //list of teams that are created by manger\n    getAlreadyCreatedListTeamOrg(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/teams?admin_id=${ID}`);\n    }\n    //List of Team Members\n    getListOfTeamOrg(ID, TeamID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/team/members?team_id=${TeamID}&organisation=true`);\n    }\n    // change Designation\n    changeListTeamUserDesignation(ID, obj) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/team/member/designation`, obj);\n    }\n    getManagersList(id) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${id}/managers`);\n    }\n    getListOfActivities(id, start, end) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${id}/getgoday/stats?start_date=${start}&end_date=${end}`);\n    }\n    sendTimesheetData(id, data) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${id}/timesheet-mail`, data);\n    }\n    uploadCertificate(id, data) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${id}/course/upload-certificate`, data);\n    }\n    // calendar event api\n    getCalendarData(ID, location, month, year) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/calendar/events?month=${month}&year=${year}&location=${location}`);\n    }\n    deleteCaledarevent(ID, evnetId) {\n      return this.http1.delete(`${environment.apiBaseUrl}/user/${ID}/calendar/event?event_id=${evnetId}`);\n    }\n    // excel sheet API\n    getExcelData(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/preapproved`);\n    }\n    setSkills(ID, data) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/preapproved/skills`, data);\n    }\n    deleteExcelUser(ID, email) {\n      return this.http1.delete(`${environment.apiBaseUrl}/user/${ID}/preapproved?Email=${email}`);\n    }\n    deleteSkill(ID, email, skill) {\n      return this.http1.delete(`${environment.apiBaseUrl}/user/${ID}/preapproved/skill?Email=${email}&Skill=${skill}`);\n    }\n    setExcelUser(ID, obj) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/preapproved`, obj);\n    }\n    patchLevel(ID, obj) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/preapproved/skills`, obj);\n    }\n    sendExcel(ID, obj) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/preapproved-mail`, obj);\n    }\n    // Remove Connected Calendar\n    disconnectCal(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/calendar/disconnect`);\n    }\n    // get pending certificates request\n    getCertificate(Id, teamId) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${Id}/managerdashboard/team/certificate-status?team_id=${teamId}`);\n    }\n    // update certificate status\n    updateCertificateStatus(ID, obj) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/course/certificate-status`, obj);\n    }\n    // distraction page for organisation\n    getDistractionDataOrg(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/organisation/distraction?organisation_id=${ID}`);\n    }\n    setDistractionDataOrg(ID, obj) {\n      //after request sending status\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/organisation/distraction`, obj, {\n        responseType: 'text',\n        observe: 'response'\n      }).pipe(map(data => {\n        return {\n          status: data.status\n        };\n      }));\n    }\n    deleteDistractionDataOrg(ID, distraction_id) {\n      return this.http1.delete(`${environment.apiBaseUrl}/user/${ID}/organisation/distraction??organisation_id=${ID}&distraction_id=${distraction_id}`, {\n        responseType: 'text',\n        observe: 'response'\n      }).pipe(map(data => {\n        return {\n          status: data.status\n        };\n      }));\n    }\n    toggleDistractionDataOrg(ID, obj) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/organisation/distraction/toggle`, obj, {\n        responseType: 'text',\n        observe: 'response'\n      }).pipe(map(data => {\n        return {\n          status: data.status\n        };\n      }));\n    }\n    // get New skills added by user for organisation admin\n    getNewSkills(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/organisation/skills`);\n    }\n    patchSkillRequest(ID, obj) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/organisation/skill`, obj, {\n        responseType: 'text',\n        observe: 'response'\n      }).pipe(map(data => {\n        return {\n          status: data.status\n        };\n      }));\n    }\n    //get similar skills\n    getSimilarSkills(skill, orgID) {\n      return this.http.get(`${environment.apiBaseUrl}/sheet/onetcenter/skills?q=${skill}&organisation_id=${1}`);\n    }\n    updateUserWater(ID, obj) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/getgohour/hydrate`, obj);\n    }\n    // get query asked list\n    getQueryAsked(baseUrl, email, filter, date, currentPage) {\n      return this.httpClient.get(`${baseUrl}/userresponses/helpsession-details?email=${email}&${date}&type=${filter}&pageNumber=${currentPage}`);\n    }\n    //get query answered lsit\n    getQueryAnswered(baseUrl, email, workSpaceId, filter, date, currentPage) {\n      return this.httpClient.get(`${baseUrl}/userresponses/helpsession-details-expert?email=${email}&team_id=${workSpaceId}&${date}&type=${filter}&pageNumber=${currentPage}`);\n    }\n    // mark query resolved\n    patchQueryAction(baseUrl, data) {\n      return this.httpClient.post(`${baseUrl}/userresponses/update-status/`, data);\n    }\n    patchRelevanceAction(baseUrl, data) {\n      return this.httpClient.post(`${baseUrl}/userresponses/update-relevance/`, data);\n    }\n    patchRatingAction(baseUrl, data) {\n      return this.httpClient.post(`${baseUrl}/userresponses/update-rating/`, data);\n    }\n    // collaboration tool API\n    setCollabTool(ID, obj) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/organisation/connect-bot`, obj);\n    }\n    // collaboration tool API\n    disconnectCollabTool(ID, slackId) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/organisation/disconnect-bot?slackworkspace_id=${slackId}`);\n    }\n    getCollabTool(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/getbot`);\n    }\n    getVerificationStatus(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/user-application-installation-verification`);\n    }\n    getTeamData(interval, teamId, startTime, endTime, managerId, org = '') {\n      return this.http.get(`${environment.webBotUrl}/userresponses/team-insight-data?Interval=${interval}&TeamId=${teamId}&StartTime=${startTime}&ManagerId=${managerId}&EndTime=${endTime}&Org=${org}`);\n    }\n    getTeamMemberData(ID, query) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/team/member/top-members?${query}`);\n    }\n    getQueryData(interval, teamId, startTime, endTime, managerId, org = '') {\n      return this.http.get(`${environment.webBotUrl}/userresponses/query-table?Interval=${interval}&TeamId=${teamId}&StartTime=${startTime}&ManagerId=${managerId}&EndTime=${endTime}&Org=${org}`);\n    }\n    getQueryTableData(interval, startTime, endTime, managerId) {\n      return this.http.get(`${environment.webBotUrl}/userresponses/teams-query-stats?Interval=${interval}&ManagerId=${managerId}&StartTime=${startTime}&EndTime=${endTime}`);\n    }\n    getQueryMemberData(interval, startTime, endTime, managerId, teamId) {\n      return this.http.get(`${environment.webBotUrl}/userresponses/team-query-data?Interval=${interval}&TeamId=${teamId}&ManagerId=${managerId}&StartTime=${startTime}&EndTime=${endTime}`);\n    }\n    getTopMembers(ID, teamId, interval, startTime = '', endTime = '') {\n      // return this.http.get(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/team/member/top-members?TeamId=${teamId}&Interval=${interval}&StartTime=${startTime}&EndTime=${endTime}`)\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/team/member/top-members?TeamId=${teamId}`);\n    }\n    getDashboardData(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/overview`);\n    }\n    getCompanyList(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/superadmin/orgs`);\n    }\n    // payment API\n    setPayment(obj, ID) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/payment`, obj);\n    }\n    setStripePayment(obj, ID) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/stripe-payment`, obj);\n    }\n    // set org colab setting\n    setColabSetting(ID, obj) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/organisation/collab-tools`, obj);\n    }\n    connectAuth(ID, Platform, orgId, redirect) {\n      if (Platform != 'googlecalendar') return this.http1.get(`${environment.apiBaseUrl}/user/${ID}/oauth/login?platform=${Platform}&OrganisationId=${orgId}`);\n      if (Platform == 'googlecalendar') return this.http1.get(`${environment.apiBaseUrl}/user/${ID}/oauth/login?platform=${Platform}&OrganisationId=${orgId}&redirect=${redirect}`);\n    }\n    setManualAuth(ID, Platform, obj) {\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/store/token?platform=${Platform}`, obj);\n    }\n    setWhatsappAuth(ID, obj) {\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/organisation/whatsapp-configuration`, obj);\n    }\n    saveSimplifyChat(ID, obj) {\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/simplify/chat`, obj);\n    }\n    getSimplifyChat(ID) {\n      return this.http1.get(`${environment.apiBaseUrl}/user/${ID}/simplify/chat`);\n    }\n    simplifyDisconnectCal(ID, obj) {\n      return this.http1.put(`${environment.apiBaseUrl}/user/${ID}/simplify/disconnect`, obj);\n    }\n    subscriptionAction(ID, obj) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/organisation/subscription`, obj);\n    }\n    uploadPDF(ID, obj, orgID) {\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/upload/file?orgid=${orgID}`, obj);\n    }\n    deletePDF(ID, orgID) {\n      return this.http1.get(`${environment.apiBaseUrl}/user/${ID}/remove/file?orgid=${orgID}`);\n    }\n    getSlackLink(email) {\n      return this.http.get(`https://slackbot.self.best/userauth/slack-auth-redirect?email=${email}`);\n    }\n    getExpertList(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/organisation/expert-list`);\n    }\n    setExpertStatus(ID, obj) {\n      return this.http1.patch(`${environment.apiBaseUrl}/user/${ID}/organisation/add-expert`, obj);\n    }\n    //for deleting blog\n    deleteBlog(ID, blogId) {\n      return this.http1.delete(`${environment.apiBaseUrl}/user/${ID}/blog?q=${blogId}`);\n    }\n    //for getting all blogs\n    getAllBlogs(ID) {\n      return this.http1.get(`${environment.apiBaseUrl}/blogs`);\n    }\n    getTeamAttendanceList(ID, obj) {\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/team/logs`, obj);\n    }\n    markUserPresent(ID, obj) {\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/managerdashboard/team/mark-attendance`, obj);\n    }\n    downloadSheet(ID, params) {\n      return this.http1.get(`${environment.apiBaseUrl}/user/${ID}/organisation/attendance?${params}`, {\n        responseType: 'arraybuffer'\n      });\n    }\n    getExpertListOrg(ID, orgId) {\n      return this.http1.get(`${environment.apiBaseUrl}/user/${ID}/organisation/experts?organisation_id=${orgId}`);\n    }\n    getAdvanceFilter(query) {\n      return this.http.get(`${environment.webBotUrl}/userresponses/queries-data-search?${query}`);\n    }\n    getMeetingInfo(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/meet`);\n    }\n    getGithubDetails(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/github`);\n    }\n    getJiraDetails(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/jira`);\n    }\n    connectGithub(ID) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/oauth/login?platform=github`);\n    }\n    downloadSheetActivity(ID, query) {\n      return this.http1.get(`${environment.apiBaseUrl}/user/${ID}/attendance-log?${query}`, {\n        responseType: 'arraybuffer'\n      });\n    }\n    downloadAdminSheetActivity(ID, query) {\n      return this.http1.get(`${environment.apiBaseUrl}/user/${ID}/organisation/attendance?${query}`, {\n        responseType: 'arraybuffer'\n      });\n    }\n    reportSheetActivity(ID, body) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/remarks-mail`, body);\n    }\n    viewDownloadSheet(ID, query) {\n      return this.http1.get(`${environment.apiBaseUrl}/user/${ID}/view-attendance-log?${query}`);\n    }\n    // <-- Train model APIs\n    getTrainModelData(ID, endPoint) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/AdminTrain/content?${endPoint}`);\n    }\n    createTrainModel(ID, endPoint, contentData) {\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/AdminTrain/content/${endPoint}`, contentData);\n    }\n    deleteTrainModel(ID, id, endpoint) {\n      return this.http1.delete(`${environment.apiBaseUrl}/user/${ID}/AdminTrain/${endpoint}/${id}`);\n    }\n    getCustomTrainModelData(ID, endpoint) {\n      return this.http.get(`${environment.apiBaseUrl}/user/${ID}/AdminTrain/custom-action?${endpoint}`);\n    }\n    createCustomTrainModel(ID, body) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/AdminTrain/custom-action`, body);\n    }\n    updateCustomTrainModel(ID, id, body) {\n      return this.http1.put(`${environment.apiBaseUrl}/user/${ID}/AdminTrain/custom-action/${id}`, body);\n    }\n    testCustomTrainAPI(apiData, apiBody) {\n      (apiBody === null || apiBody === void 0 ? void 0 : apiBody.headers) ? apiBody.headers = new HttpHeaders(apiBody.headers) : '';\n      return this.http1.request(apiData.method, apiData.url, apiBody);\n    }\n    // Train model APIs -->\n    submitRegularize(ID, body) {\n      return this.http.post(`${environment.apiBaseUrl}/user/${ID}/attendance-regularization`, body);\n    }\n    getRequestList(ID) {\n      return this.http1.get(`${environment.apiBaseUrl}/user/${ID}/attendance-regularization`);\n    }\n    getRequestListManager(ID) {\n      return this.http1.get(`${environment.apiBaseUrl}/user/${ID}/attendance-regularization?manager=true`);\n    }\n    acceptRequestList(ID, body) {\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/attendance-regularization-approval`, body);\n    }\n    getTimesheetData(ID) {\n      return this.http1.get(`${environment.apiBaseUrl}/user/${ID}/timesheet`);\n    }\n    getTimesheetAdmin(ID, teamId) {\n      return this.http1.get(`${environment.apiBaseUrl}/user/${ID}/timesheet?admin=true&team_id=${teamId}`);\n    }\n    addTimesheetAction(ID, body) {\n      return this.http1.post(`${environment.apiBaseUrl}/user/${ID}/timesheet`, body);\n    }\n    viewDownloadSheetManager(ID, query) {\n      return this.http1.get(`${environment.apiBaseUrl}/user/${ID}/view-attendance-log-team-view?${query}`);\n    }\n    downloadSheetAdmin(ID, body) {\n      return this.http1.get(`${environment.apiBaseUrl}/user/${ID}/timesheet/download?Id=${body}`, {\n        responseType: 'arraybuffer'\n      });\n    }\n  }\n  DashboardService.Éµfac = function DashboardService_Factory(t) {\n    i0.ÉµÉµinvalidFactory();\n  };\n  DashboardService.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n    token: DashboardService,\n    factory: DashboardService.Éµfac\n  });\n  return DashboardService;\n})();","map":null,"metadata":{},"sourceType":"module"}